generator client {
  provider = "prisma-client-js"
  // Optimize for serverless environments
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // Enable connection pooling for Neon
  directUrl = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  email         String         @unique
  name          String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  
  // Writing Toolkit
  textProcessing TextProcessingHistory[]
  
  // Resume Builder
  resumes       Resume[]
  
  // Report Generator
  reports       Report[]
  
  // SQL Generator
  sqlQueries    SqlQuery[]
  
  // Chatbot
  conversations Conversation[]
  knowledgeBase KnowledgeBase[]

  @@map("users")
  @@index([email])
  @@index([createdAt])
}

// Writing Toolkit Models
model TextProcessingHistory {
  id                    Int      @id @default(autoincrement())
  userId                String
  originalText          String   @db.Text
  processedText         String   @db.Text
  operation             String   @db.VarChar(50)
  tone                  String?  @db.VarChar(20)
  wordCountOriginal     Int      @default(0)
  wordCountProcessed    Int      @default(0)
  createdAt             DateTime @default(now())
  
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([operation])
  @@map("text_processing_history")
}

// Resume Builder Models
model Resume {
  id              String   @id @default(cuid())
  userId          String
  title           String   @db.VarChar(255)
  jobTitle        String   @db.VarChar(255)
  industry        String?  @db.VarChar(100)
  experience      String   @db.Text
  skills          String   @db.Text
  education       String   @db.Text
  generatedResume String   @db.Text
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([industry])
  @@map("resumes")
}

// Report Generator Models
model Report {
  id              String     @id @default(cuid())
  userId          String
  title           String     @db.VarChar(255)
  reportType      ReportType
  bulletPoints    String     @db.Text
  generatedReport String     @db.Text
  tone            String?    @db.VarChar(50)
  audience        String?    @db.VarChar(100)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  
  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([reportType])
  @@map("reports")
}

enum ReportType {
  MEETING_SUMMARY
  PROJECT_UPDATE
  WEEKLY_REPORT
  INCIDENT_REPORT
  BUSINESS_PROPOSAL
  RESEARCH_SUMMARY
}

// SQL Generator Models
model SqlQuery {
  id              String    @id @default(cuid())
  userId          String
  naturalLanguage String    @db.Text
  generatedSql    String    @db.Text
  queryType       QueryType
  database        String?   @db.VarChar(50)
  explanation     String?   @db.Text
  isValid         Boolean   @default(true)
  createdAt       DateTime  @default(now())
  
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@index([queryType])
  @@index([database])
  @@map("sql_queries")
}

enum QueryType {
  SELECT
  INSERT
  UPDATE
  DELETE
  CREATE
  ALTER
  JOIN
  AGGREGATE
  OTHER
}

// Chatbot Models
model Conversation {
  id        String    @id @default(cuid())
  userId    String
  title     String    @db.VarChar(255)
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
  @@map("conversations")
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           MessageRole
  content        String       @db.Text
  timestamp      DateTime     @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId, timestamp])
  @@map("messages")
}

model KnowledgeBase {
  id        String   @id @default(cuid())
  userId    String
  title     String   @db.VarChar(255)
  content   String   @db.Text
  category  String?  @db.VarChar(100)
  tags      String[]
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isActive])
  @@index([category])
  @@map("knowledge_base")
}

enum MessageRole {
  USER
  ASSISTANT
  SYSTEM
}
